// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProtoCommandServiceClient is the client API for ProtoCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoCommandServiceClient interface {
	Create(ctx context.Context, in *CreateProtoRequest, opts ...grpc.CallOption) (*CreateProtoResponse, error)
	Update(ctx context.Context, in *UpdateProtoRequest, opts ...grpc.CallOption) (*UpdateProtoResponse, error)
	Delete(ctx context.Context, in *DeleteProtoRequest, opts ...grpc.CallOption) (*DeleteProtoResponse, error)
}

type protoCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoCommandServiceClient(cc grpc.ClientConnInterface) ProtoCommandServiceClient {
	return &protoCommandServiceClient{cc}
}

func (c *protoCommandServiceClient) Create(ctx context.Context, in *CreateProtoRequest, opts ...grpc.CallOption) (*CreateProtoResponse, error) {
	out := new(CreateProtoResponse)
	err := c.cc.Invoke(ctx, "/proto.command.ProtoCommandService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoCommandServiceClient) Update(ctx context.Context, in *UpdateProtoRequest, opts ...grpc.CallOption) (*UpdateProtoResponse, error) {
	out := new(UpdateProtoResponse)
	err := c.cc.Invoke(ctx, "/proto.command.ProtoCommandService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoCommandServiceClient) Delete(ctx context.Context, in *DeleteProtoRequest, opts ...grpc.CallOption) (*DeleteProtoResponse, error) {
	out := new(DeleteProtoResponse)
	err := c.cc.Invoke(ctx, "/proto.command.ProtoCommandService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoCommandServiceServer is the server API for ProtoCommandService service.
// All implementations must embed UnimplementedProtoCommandServiceServer
// for forward compatibility
type ProtoCommandServiceServer interface {
	Create(context.Context, *CreateProtoRequest) (*CreateProtoResponse, error)
	Update(context.Context, *UpdateProtoRequest) (*UpdateProtoResponse, error)
	Delete(context.Context, *DeleteProtoRequest) (*DeleteProtoResponse, error)
	mustEmbedUnimplementedProtoCommandServiceServer()
}

// UnimplementedProtoCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoCommandServiceServer struct {
}

func (UnimplementedProtoCommandServiceServer) Create(context.Context, *CreateProtoRequest) (*CreateProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProtoCommandServiceServer) Update(context.Context, *UpdateProtoRequest) (*UpdateProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProtoCommandServiceServer) Delete(context.Context, *DeleteProtoRequest) (*DeleteProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProtoCommandServiceServer) mustEmbedUnimplementedProtoCommandServiceServer() {}

// UnsafeProtoCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoCommandServiceServer will
// result in compilation errors.
type UnsafeProtoCommandServiceServer interface {
	mustEmbedUnimplementedProtoCommandServiceServer()
}

func RegisterProtoCommandServiceServer(s *grpc.Server, srv ProtoCommandServiceServer) {
	s.RegisterService(&_ProtoCommandService_serviceDesc, srv)
}

func _ProtoCommandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCommandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.command.ProtoCommandService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCommandServiceServer).Create(ctx, req.(*CreateProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoCommandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCommandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.command.ProtoCommandService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCommandServiceServer).Update(ctx, req.(*UpdateProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoCommandService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProtoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoCommandServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.command.ProtoCommandService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoCommandServiceServer).Delete(ctx, req.(*DeleteProtoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProtoCommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.command.ProtoCommandService",
	HandlerType: (*ProtoCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _ProtoCommandService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _ProtoCommandService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _ProtoCommandService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/src/command/service.proto",
}
