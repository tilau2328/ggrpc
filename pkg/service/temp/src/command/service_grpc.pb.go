// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TempCommandServiceClient is the client API for TempCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TempCommandServiceClient interface {
	Create(ctx context.Context, in *CreateTempRequest, opts ...grpc.CallOption) (*CreateTempResponse, error)
	Update(ctx context.Context, in *UpdateTempRequest, opts ...grpc.CallOption) (*UpdateTempResponse, error)
	Delete(ctx context.Context, in *DeleteTempRequest, opts ...grpc.CallOption) (*DeleteTempResponse, error)
}

type tempCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTempCommandServiceClient(cc grpc.ClientConnInterface) TempCommandServiceClient {
	return &tempCommandServiceClient{cc}
}

func (c *tempCommandServiceClient) Create(ctx context.Context, in *CreateTempRequest, opts ...grpc.CallOption) (*CreateTempResponse, error) {
	out := new(CreateTempResponse)
	err := c.cc.Invoke(ctx, "/temp.command.TempCommandService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tempCommandServiceClient) Update(ctx context.Context, in *UpdateTempRequest, opts ...grpc.CallOption) (*UpdateTempResponse, error) {
	out := new(UpdateTempResponse)
	err := c.cc.Invoke(ctx, "/temp.command.TempCommandService/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tempCommandServiceClient) Delete(ctx context.Context, in *DeleteTempRequest, opts ...grpc.CallOption) (*DeleteTempResponse, error) {
	out := new(DeleteTempResponse)
	err := c.cc.Invoke(ctx, "/temp.command.TempCommandService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TempCommandServiceServer is the server API for TempCommandService service.
// All implementations must embed UnimplementedTempCommandServiceServer
// for forward compatibility
type TempCommandServiceServer interface {
	Create(context.Context, *CreateTempRequest) (*CreateTempResponse, error)
	Update(context.Context, *UpdateTempRequest) (*UpdateTempResponse, error)
	Delete(context.Context, *DeleteTempRequest) (*DeleteTempResponse, error)
	mustEmbedUnimplementedTempCommandServiceServer()
}

// UnimplementedTempCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTempCommandServiceServer struct {
}

func (UnimplementedTempCommandServiceServer) Create(context.Context, *CreateTempRequest) (*CreateTempResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTempCommandServiceServer) Update(context.Context, *UpdateTempRequest) (*UpdateTempResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTempCommandServiceServer) Delete(context.Context, *DeleteTempRequest) (*DeleteTempResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTempCommandServiceServer) mustEmbedUnimplementedTempCommandServiceServer() {}

// UnsafeTempCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TempCommandServiceServer will
// result in compilation errors.
type UnsafeTempCommandServiceServer interface {
	mustEmbedUnimplementedTempCommandServiceServer()
}

func RegisterTempCommandServiceServer(s *grpc.Server, srv TempCommandServiceServer) {
	s.RegisterService(&_TempCommandService_serviceDesc, srv)
}

func _TempCommandService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTempRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempCommandServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temp.command.TempCommandService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempCommandServiceServer).Create(ctx, req.(*CreateTempRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TempCommandService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTempRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempCommandServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temp.command.TempCommandService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempCommandServiceServer).Update(ctx, req.(*UpdateTempRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TempCommandService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTempRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TempCommandServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temp.command.TempCommandService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TempCommandServiceServer).Delete(ctx, req.(*DeleteTempRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TempCommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temp.command.TempCommandService",
	HandlerType: (*TempCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _TempCommandService_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _TempCommandService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _TempCommandService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temp/src/command/service.proto",
}
